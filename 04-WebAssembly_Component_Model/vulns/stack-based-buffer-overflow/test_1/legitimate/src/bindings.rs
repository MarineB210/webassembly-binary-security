// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exploit {
    pub mod evil {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod malicious {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            #[allow(unused_unsafe, clippy::all)]
            pub fn malicious(value: &[u8]) -> () {
                unsafe {
                    let vec0 = value;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "exploit:evil/malicious")]
                    unsafe extern "C" {
                        #[link_name = "malicious"]
                        fn wit_import1(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0.cast_mut(), len0) };
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod exploit {
        pub mod legitimate {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod victim {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_victim_cabi<T: Guest>() {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::victim();
                }
                pub trait Guest {
                    fn victim() -> ();
                }
                #[doc(hidden)]
                macro_rules! __export_exploit_legitimate_victim_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "exploit:legitimate/victim#victim")] unsafe extern "C" fn
                        export_victim() { unsafe { $($path_to_types)*::
                        _export_victim_cabi::<$ty > () } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_exploit_legitimate_victim_cabi;
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_legitimate_world_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::exploit::legitimate::victim::__export_exploit_legitimate_victim_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::exploit::legitimate::victim);
    };
}
#[doc(inline)]
pub(crate) use __export_legitimate_world_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:exploit:legitimate:legitimate-world:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 289] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x9a\x01\x01A\x02\x01\
A\x04\x01B\x03\x01p}\x01@\x01\x05value\0\x01\0\x04\0\x09malicious\x01\x01\x03\0\x16\
exploit:evil/malicious\x05\0\x01B\x02\x01@\0\x01\0\x04\0\x06victim\x01\0\x04\0\x19\
exploit:legitimate/victim\x05\x01\x04\0#exploit:legitimate/legitimate-world\x04\0\
\x0b\x16\x01\0\x10legitimate-world\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\
\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
